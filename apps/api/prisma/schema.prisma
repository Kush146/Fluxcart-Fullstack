generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* =========================
   Core models
   ========================= */

model User {
  id            String     @id @default(cuid())
  email         String?    @unique
  name          String?
  role          Role       @default(BUYER)
  createdAt     DateTime   @default(now())
  phone         String?    @unique
  emailVerified DateTime?
  image         String?

  // --- Profile fields (NEW) ---
  avatarUrl     String?            // if you want to keep 'image' for OAuth, this can be user-set avatar
  bio           String?            @db.Text
  // Shipping address (simple, inline)
  addressLine1  String?            @db.VarChar(191)
  addressLine2  String?            @db.VarChar(191)
  city          String?            @db.VarChar(96)
  state         String?            @db.VarChar(96)
  postalCode    String?            @db.VarChar(32)
  country       String?            @db.VarChar(64)
  // Preferences
  defaultCurrency String           @default("INR")
  preferences   Json?

  // Relations
  accounts      Account[]
  cart          CartItem[]
  orders        Order[]
  sessions      Session[]
}

model Product {
  id          String        @id @default(cuid())
  title       String
  slug        String        @unique
  description String
  priceCents  Int
  currency    String        @default("INR")
  rating      Float         @default(0)
  images      String[]
  stock       Int           @default(100)
  sellerId    String?
  createdAt   DateTime      @default(now())

  // category for filtering / browsing
  category    String?       @db.VarChar(191)

  cartItems   CartItem[]
  groupBuys   GroupBuy[]
  orderItems  OrderItem[]
  rental      RentalPolicy?

  @@index([category])
}

model RentalPolicy {
  id           String  @id @default(cuid())
  productId    String  @unique
  minDays      Int     @default(1)
  maxDays      Int     @default(30)
  dailyPrice   Int
  depositCents Int

  product      Product @relation(fields: [productId], references: [id])
}

model GroupBuy {
  id              String                @id @default(cuid())
  productId       String
  creatorId       String
  minParticipants Int
  deadline        DateTime
  status          GBStatus              @default(OPEN)

  product         Product               @relation(fields: [productId], references: [id])
  participants    GroupBuyParticipant[]
}

model GroupBuyParticipant {
  id         String   @id @default(cuid())
  groupBuyId String
  userId     String
  intent     Boolean  @default(true)
  createdAt  DateTime @default(now())

  groupBuy   GroupBuy @relation(fields: [groupBuyId], references: [id])
}

model CartItem {
  id        String    @id @default(cuid())
  userId    String
  productId String
  qty       Int       @default(1)
  kind      CartKind  @default(BUY)
  startDate DateTime?
  endDate   DateTime?
  holdId    String?   @unique
  createdAt DateTime  @default(now())

  product   Product   @relation(fields: [productId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  status        OrderStatus @default(PENDING)
  totalCents    Int
  depositCents  Int         @default(0)
  currency      String      @default("INR")
  paymentRef    String?
  createdAt     DateTime    @default(now())
  discountCents Int         @default(0)

  // (Optional) if you added emailSent earlier; safe to leave if present or remove if not using
  // emailSent     Boolean     @default(false)

  user          User        @relation(fields: [userId], references: [id])
  items         OrderItem[]
}

model OrderItem {
  id         String    @id @default(cuid())
  orderId    String
  productId  String
  kind       CartKind
  qty        Int
  priceCents Int
  startDate  DateTime?
  endDate    DateTime?

  order      Order     @relation(fields: [orderId], references: [id])
  product    Product   @relation(fields: [productId], references: [id])
}

/* ============ NextAuth models ============ */

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/* ============ Enums ============ */

enum Role {
  BUYER
  SELLER
  ADMIN
}

enum GBStatus {
  OPEN
  SETTLING
  SUCCESS
  FAILED
}

enum CartKind {
  BUY
  RENT
  SWAP
}

enum OrderStatus {
  PENDING
  PAID
  PACKED
  SHIPPED
  ACTIVE_RENT
  RETURNED
  REFUNDED
  CANCELED
}
